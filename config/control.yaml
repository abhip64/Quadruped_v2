#--------------------------------------------------------------------------------------------------------------------
#This file specifies the controllers and their types that needs to be
#spawned.
#For position_controllers pid values mentioned alongwith the controller
#definition is not taken into account. But gazebo does require a pid
#value definition to simulate dynamics. So the gazebo pid parameters
#are defined separately. Please check the below link for more info:
#http://answers.gazebosim.org/question/5468/gazebo_ros_pkgs-no-p-gain-specified-for-pid-in-positionjointinterface/
#This file is loaded into the parameter server via the launch file.
#--------------------------------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------------------------------
#To publish the joint state values containing the joint angles, velocities,
#and torque values. These can be subscribed to by other visualization
#softwares such as Rviz or can be fed into an Arduino for hardware control
joint_state_controller:
  type: joint_state_controller/JointStateController
  publish_rate: 50

#Position Controllers for each of the 12 joints of the quadruped
joint1_lf_controller:
  type: position_controllers/JointPositionController
  joint: joint1_lf
  pid: {p: 400.0, i: 0.0, d: 1.0, i_clamp: 00}

joint2_lf_controller:
  type: position_controllers/JointPositionController
  joint: joint2_lf
  pid: {p: 400.0, i: 0.0, d: 1.0, i_clamp: 00}

joint3_lf_controller:
  type: position_controllers/JointPositionController
  joint: joint3_lf
  pid: {p: 400.0, i: 0.0, d: 1.0, i_clamp: 00}

joint1_lr_controller:
  type: position_controllers/JointPositionController
  joint: joint1_lr
  pid: {p: 400.0, i: 0.0, d: 1.0, i_clamp: 00}

joint2_lr_controller:
  type: position_controllers/JointPositionController
  joint: joint2_lr
  pid: {p: 400.0, i: 0.0, d: 1.0, i_clamp: 00}

joint3_lr_controller:
  type: position_controllers/JointPositionController
  joint: joint3_lr
  pid: {p: 400.0, i: 0.0, d: 1.0, i_clamp: 00}

joint1_rf_controller:
  type: position_controllers/JointPositionController
  joint: joint1_rf
  pid: {p: 400.0, i: 0.0, d: 1.0, i_clamp: 00}

joint2_rf_controller:
  type: position_controllers/JointPositionController
  joint: joint2_rf
  pid: {p: 400.0, i: 0.0, d: 1.0, i_clamp: 00}

joint3_rf_controller:
  type: position_controllers/JointPositionController
  joint: joint3_rf
  pid: {p: 400.0, i: 0.0, d: 1.0, i_clamp: 00}

joint1_rr_controller:
  type: position_controllers/JointPositionController
  joint: joint1_rr
  pid: {p: 400.0, i: 0.0, d: 1.0, i_clamp: 00}

joint2_rr_controller:
  type: position_controllers/JointPositionController
  joint: joint2_rr
  pid: {p: 400.0, i: 0.0, d: 1.0, i_clamp: 00}

joint3_rr_controller:
  type: position_controllers/JointPositionController
  joint: joint3_rr
  pid: {p: 400.0, i: 0.0, d: 1.0, i_clamp: 00}
#--------------------------------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------------------------------
#Gazebo PID parameters which are required for dynamic simulation
#DONT EXCEED d above 2.5 as the system can go unstable. Maybe due
#to improper tuning done by me
gazebo_ros_control/pid_gains:
  joint1_lf: {p: 400.0, i: 30.0, d: 1.0}
  joint2_lf: {p: 400.0, i: 30.0, d: 1.0}
  joint3_lf: {p: 400.0, i: 30.0, d: 1.0}
  joint1_lr: {p: 400.0, i: 30.0, d: 1.0}
  joint2_lr: {p: 400.0, i: 30.0, d: 1.0}
  joint3_lr: {p: 400.0, i: 30.0, d: 1.0}
  joint1_rf: {p: 400.0, i: 30.0, d: 1.0}
  joint2_rf: {p: 400.0, i: 30.0, d: 1.0}
  joint3_rf: {p: 400.0, i: 30.0, d: 1.0}
  joint1_rr: {p: 400.0, i: 30.0, d: 1.0}
  joint2_rr: {p: 400.0, i: 30.0, d: 1.0}
  joint3_rr: {p: 400.0, i: 30.0, d: 1.0}
#--------------------------------------------------------------------------------------------------------------------
