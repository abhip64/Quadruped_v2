<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="quad2">

<!------------------------------------------------------------------->
<xacro:property name = "deg_to_rad" value ="0.0174533"/>
<xacro:property name = "link1_vert_angle" value="0.785"/>

<!--Scaling of mass and length is done because of the errors in simulation
    due to very small values of inertia. Torque output from the simulation
    otherwise proved to be highly inconsistent. This could probably be due
    to ill conditioning problem due to the small inertia-->
<xacro:property name = "scale_length" value="2"/>
<xacro:property name = "scale_mass" value="10"/>

<xacro:property name = "body_len" value="${scale_length*0.15}"/>
<xacro:property name = "body_width"  value="${scale_length*0.15}"/>
<xacro:property name = "body_height" value="${scale_length*0.07}"/>
<!--xacro:property name = "mass_body"   value="${scale_mass*0.6}"/-->
<xacro:property name = "mass_body"   value="${scale_mass*1}"/>


<xacro:property name = "link1_len" value="${scale_length*0.044}"/>
<xacro:property name = "mass_link1" value="${scale_mass*0.09}"/>

<xacro:property name = "link2_len" value="${scale_length*0.084}"/>
<xacro:property name = "mass_link2" value="${scale_mass*0.08}"/>

<xacro:property name = "link3_len"  value="${scale_length*0.14}"/>
<!--xacro:property name = "mass_link3" value="${scale_mass*0.06}"/-->
<xacro:property name = "mass_link3" value="${scale_mass*0.1}"/>


<xacro:property name = "leg_rad"   value="${scale_length*0.008}"/>

<material name = "red">
<color rgba = "1 0 0 1"/>
</material>

<material name = "blue">
<color rgba = "0 0 1 1"/>
</material>

<!--Root Link is defined as kdl does not support a root link with inertia
element. Adding the element creates problem in gazebo. The cog or the inertia of the
base link is somehow affected. Thus causing large instability in the model.-->
<!--link name = "root_link">
</link-->

<link name = "world"/>

<joint name = "dummy_link" type="floating">
  <parent link = "world"/>
  <child link = "base_link"/>
</joint>

<link name = "base_link">

<collision>
  <geometry>
  <box size="${body_len} ${body_width} ${body_height}"/>
  </geometry>
</collision>

<visual>
<geometry>
<box size="${body_len} ${body_width} ${body_height}"/>
</geometry>
<material name="red">
<color rgba = "0 0 1 1"/>
</material>
</visual>

<inertial>
  <mass value="${mass_body}"/>
  <inertia
    ixx="${(1/12)*mass_body*(body_len*body_len + body_height*body_height)}" ixy="0.0" ixz="0.0"
    iyy="${(1/12)*mass_body*(body_len*body_len + body_height*body_height)}" iyz="0.0"
    izz="${(1/12)*mass_body*(body_len*body_len + body_width*body_width)}"/>
</inertial>

</link>

<gazebo reference="base_link">
  <kp>100000000.0</kp>
<kd>100000000.0</kd>
  <mu1>1000000</mu1>
  <mu2>1000000</mu2>
  <material>Gazebo/Red</material>
</gazebo>


<xacro:macro name="leg" params="suffix front left quadrant">

<link name = "link1_${suffix}">

<collision>
  <origin rpy = "0 ${90*deg_to_rad} 0" xyz = "${link1_len/2} 0 0"/>
  <geometry>
  <cylinder length="${link1_len}" radius="${leg_rad}"/>
  </geometry>

</collision>

<visual>
<geometry>
<cylinder length="${link1_len}" radius="${leg_rad}"/>
</geometry>
<origin rpy = "0 ${90*deg_to_rad} 0" xyz = "${link1_len/2} 0 0"/>
<material name = "blue"/>
</visual>

<inertial>
    <origin rpy = "0 0 0" xyz = "${link1_len/2} 0 0"/>
  <mass value="${mass_link1}"/>
  <inertia
    ixx="${(1/2)*mass_link1*leg_rad*leg_rad}" ixy="0.0" ixz="0.0"
    iyy="${(1/12)*mass_link1*(3*leg_rad*leg_rad + link1_len*link1_len)}" iyz="0.0"
    izz="${(1/12)*mass_link1*(3*leg_rad*leg_rad + link1_len*link1_len)}"/>
</inertial>

</link>

<gazebo reference="link1_${suffix}">
  <kp>100000000.0</kp>
<kd>10000000.0</kd>
  <mu1>1000000</mu1>
  <mu2>1000000</mu2>
  <material>Gazebo/Blue</material>
</gazebo>

<joint name = "joint1_${suffix}" type="revolute">
<origin rpy = "0 0 ${link1_vert_angle*(2*quadrant-1)}" xyz = "${front*body_width/2} ${left*body_len/2} 0"/>
<axis xyz = "0 0 -1"/>
<limit effort="200.0" lower="-1.57075" upper="1.57075" velocity="4"/>
<parent link = "base_link"/>
<child link="link1_${suffix}"/>
  <dynamics damping ="10.0"/>
</joint>

<link name = "link2_${suffix}">

<collision>
  <geometry>
  <cylinder length="${link2_len}" radius="${leg_rad}"/>
  </geometry>
  <origin rpy = "0 -${90*deg_to_rad} 0" xyz = "${link2_len/2} 0 0"/>
</collision>

<visual>
<geometry>
<cylinder length="${link2_len}" radius="${leg_rad}"/>
</geometry>
<origin rpy = "0 -${90*deg_to_rad} 0" xyz = "${link2_len/2} 0 0"/>
<material name = "blue"/>
</visual>

<inertial>
  <origin rpy = "0 0 0" xyz = "${link2_len/2} 0 0"/>
  <mass value="${mass_link2}"/>
  <inertia
    ixx="${(1/2)*mass_link2*leg_rad*leg_rad}" ixy="0.0" ixz="0.0"
    iyy="${(1/12)*mass_link2*(3*leg_rad*leg_rad + link2_len*link2_len)}" iyz="0.0"
    izz="${(1/12)*mass_link2*(3*leg_rad*leg_rad + link2_len*link2_len)}"/>
</inertial>

</link>

<gazebo reference="link2_${suffix}">
  <kp>100000000.0</kp>
<kd>10000000.0</kd>
  <mu1>1000000</mu1>
  <mu2>1000000</mu2>
  <material>Gazebo/Blue</material>
</gazebo>

<joint name = "joint2_${suffix}" type="revolute">
<origin rpy = "${90*deg_to_rad} 0 0" xyz = "${link1_len} 0 0"/>
<axis xyz = "0 0 -1"/>
<limit effort="200.0" lower="-1.57075" upper="1.57075" velocity="4"/>
<parent link = "link1_${suffix}"/>
<child link="link2_${suffix}"/>
  <dynamics damping ="10.0"/>
</joint>

<link name = "link3_${suffix}">

<collision>
  <geometry>
  <cylinder length="${link3_len}" radius="${leg_rad}"/>
  </geometry>
  <origin rpy = "0 -${90*deg_to_rad} 0" xyz = "${link3_len/2} 0 0"/>
</collision>

<visual>
<geometry>
<cylinder length="${link3_len}" radius="${leg_rad}"/>
</geometry>
<origin rpy = "0 -${90*deg_to_rad} 0" xyz = "${link3_len/2} 0 0"/>
<material name = "blue"/>
</visual>

<inertial>
  <origin rpy = "0 0 0" xyz = "${link3_len/2} 0 0"/>
  <mass value="${mass_link3}"/>
  <inertia
    ixx="${(1/2)*mass_link3*leg_rad*leg_rad}" ixy="0.0" ixz="0.0"
    iyy="${(1/12)*mass_link3*(3*leg_rad*leg_rad + link3_len*link3_len)}" iyz="0.0"
    izz="${(1/12)*mass_link3*(3*leg_rad*leg_rad + link3_len*link3_len)}"/>
</inertial>

</link>

<gazebo reference="link3_${suffix}">
  <kp>100000000.0</kp>
<kd>10000000.0</kd>
  <mu1>1000000</mu1>
  <mu2>1000000</mu2>
  <material>Gazebo/Blue</material>
</gazebo>

<joint name = "joint3_${suffix}" type="revolute">
<origin rpy = "0 0 -${90*deg_to_rad}" xyz = "${link2_len} 0 0"/>
<axis xyz = "0 0 -1"/>
<limit effort="200.0" lower="-3.14" upper="1.57075" velocity="4"/>
<parent link = "link2_${suffix}"/>
<child link="link3_${suffix}"/>
  <dynamics damping ="10.0"/>
</joint>

</xacro:macro>

<xacro:macro name="transmission_block" params="joint_name">
 <transmission name="tran_${joint_name}">
   <type>transmission_interface/SimpleTransmission</type>
   <joint name="${joint_name}">
     <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
   </joint>
   <actuator name="motor_${joint_name}">
     <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
     <mechanicalReduction>1</mechanicalReduction>
   </actuator>
 </transmission>
</xacro:macro>


<xacro:leg suffix="lf" front="1" left="1" quadrant="1"/>
<xacro:leg suffix="lr" front="-1" left="1" quadrant="2"/>
<xacro:leg suffix="rr" front="-1" left="-1" quadrant="3"/>
<xacro:leg suffix="rf" front="1" left="-1" quadrant="4"/>

<xacro:transmission_block joint_name = "joint1_lf"/>
<xacro:transmission_block joint_name = "joint1_lr"/>
<xacro:transmission_block joint_name = "joint1_rr"/>
<xacro:transmission_block joint_name = "joint1_rf"/>

<xacro:transmission_block joint_name = "joint2_lf"/>
<xacro:transmission_block joint_name = "joint2_lr"/>
<xacro:transmission_block joint_name = "joint2_rr"/>
<xacro:transmission_block joint_name = "joint2_rf"/>

<xacro:transmission_block joint_name = "joint3_lf"/>
<xacro:transmission_block joint_name = "joint3_lr"/>
<xacro:transmission_block joint_name = "joint3_rr"/>
<xacro:transmission_block joint_name = "joint3_rf"/>

<!--ROS Control plugin is required for ros to communicate to Gazebo for
    controlling the robot-->
<gazebo>
  <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
        <legacyModeNS>true</legacyModeNS>
<!--To avoid the legacyMode Warning-->
<!--https://answers.ros.org/question/292444/gazebo_ros_control-plugin-gazeboroscontrolplugin-missing-legacymodens-defaultrobothwsim/-->
  </plugin>
</gazebo>


</robot>
